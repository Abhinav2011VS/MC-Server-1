name: Deploy Minecraft Server

on:
  push:
    branches:
      - master

jobs:
  start-server:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Remove folders (Optional Commit/Push)
        run: |
          for folder in cache libraries logs versions; do
            if [ -d "$folder" ]; then
              git rm -r --cached "$folder"
              echo "Removed $folder"
            else
              echo "$folder does not exist"
            fi
          done
          if [ "$(git status --porcelain)" ]; then
            git commit -am "Remove cache/, libraries/, logs/, and versions/ folders"
            git push
          else
            echo "No changes detected. Skipping commit and push."
          fi

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget screen jq

      - name: Verify Java Installation
        run: java -version

      - name: Remove Plugins
        run: |
          PLUGINS_DIR="plugins"
          if [ -d "$PLUGINS_DIR" ]; then
            echo "Removing plugins..."
            cd "$PLUGINS_DIR"
            for plugin in \
              BackpackPlus.jar \
              BannedWordsEffective.jar \
              DeadlyDisasters.jar \
              DeathLocation.jar \
              DiscordLinker.jar \
              EpicRealmsSMP.jar \
              EssentialsX.jar \
              EssentialsXChat.jar \
              EssentialsXSpawn.jar \
              FarmProtect-v1.9.0.jar \
              Giants.jar \
              Goditems.jar \
              Home.jar \
              LifeStealZ.jar \
              LoginOP.jar \
              Multiverse-Core.jar \
              NonFlyingWeather.jar \
              PlaceholderAPI.jar \
              Playit.GG.jar \
              PowerRanks.jar \
              ProtocolLib.jar \
              SilentAutoSave.jar \
              SkinsRestorer.jar \
              Sleeper.jar \
              SpawnerSilk.jar \
              TreeFeller.jar \
              VeinMiner.jar \
              ViaBackwards.jar \
              ViaVersion.jar \
              WorldEdit.jar \
              WorldGuard.jar; do
              if [ -f "$plugin" ]; then
                rm -f "$plugin"
                echo "Removed $plugin"
              else
                echo "$plugin does not exist"
              fi
            done
          else
            echo "Plugins folder does not exist"
          fi

      - name: Download Latest Plugins
        run: |
          PLUGINS_DIR="plugins"
          mkdir -p "$PLUGINS_DIR"
          echo "Downloading latest plugins from GitHub..."
          
          # Fetch the list of plugins from the GitHub repository
          curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/Abhinav2011VS/Latest-Plugins-For-MC-Server-1/contents/plugins" -o plugins_list.json || { echo "Failed to fetch plugins list"; exit 1; }
          
          # Download each plugin from the list
          for plugin_url in $(jq -r '.[].download_url' plugins_list.json); do
            echo "Downloading $plugin_url..."
            wget -q -P "$PLUGINS_DIR" "$plugin_url"
            echo "Downloaded: $(basename "$plugin_url")"
          done
          
          # Clean up temporary file
          rm -f plugins_list.json
          
          echo "Plugins downloaded."

      - name: Commit/Push Plugins (If Necessary)
        run: |
          if [ "$(git status --porcelain)" ]; then
            git commit -am "Update Plugins"
            git push
          else
            echo "No changes detected for plugins. Skipping commit and push."
          fi

      - name: Remove Existing Datapacks
        run: |
          DATAPACKS_DIR="world/datapacks/"
          if [ -d "$DATAPACKS_DIR" ]; then
            echo "Removing all datapack files..."
            rm -rf $DATAPACKS_DIR*
            echo "Datapacks removed."
          else
            echo "Datapacks directory does not exist."
          fi

      - name: Download Latest Datapacks
        run: |
          DATAPACKS_DIR="world/datapacks/"
          REPO_URL="https://api.github.com/repos/Abhinav2011VS/Latest-Plugins-For-MC-Server-1/contents/datapacks"
          
          # Create datapacks directory if it doesn't exist
          mkdir -p "$DATAPACKS_DIR"
      
          # Fetch the list of datapacks
          echo "Fetching datapack list..."
          curl -s -H "Accept: application/vnd.github.v3+json" "$REPO_URL" -o datapack_list.json || { echo "Failed to fetch datapack list"; exit 1; }
      
          # Download each datapack
          for datapack_url in $(jq -r '.[].download_url' datapack_list.json); do
            if [ "$datapack_url" != "null" ]; then
              echo "Downloading $datapack_url..."
              wget -q -P "$DATAPACKS_DIR" "$datapack_url"
              echo "Downloaded: $(basename "$datapack_url")"
            else
              echo "Skipping invalid datapack URL."
            fi
          done
      
          echo "All datapacks downloaded successfully."

      - name: Commit/Push Datapacks (If Necessary)
        run: |
          if [ "$(git status --porcelain)" ]; then
            git commit -am "Update Datapacks"
            git push
          else
            echo "No changes detected for datapacks. Skipping commit and push."
          fi

      - name: Verify and Download Latest server.jar
        run: |
          echo "Starting process to download the latest server.jar..."
      
          # Delete existing server.jar if it exists
          echo "Deleting existing server.jar (if any)..."
          if [ -f "server.jar" ]; then
            rm -f server.jar
            echo "Existing server.jar deleted."
          else
            echo "No existing server.jar found."
          fi
      
          # Fetch the latest release URL for server.jar from GitHub
          echo "Fetching latest release details from GitHub..."
          LATEST_RELEASE_URL=$(curl -s https://api.github.com/repos/Abhinav2011VS/Latest-Paper/releases/latest | jq -r '.assets[] | select(.name=="server.jar") | .browser_download_url')
      
          # Check if the URL was found
          if [ -z "$LATEST_RELEASE_URL" ]; then
            echo "Error: Could not find server.jar in the latest release. Exiting..."
            exit 1
          fi
      
          # Download the server.jar file
          echo "Downloading server.jar from $LATEST_RELEASE_URL..."
          wget -O server.jar "$LATEST_RELEASE_URL"
      
          # Verify if the download was successful
          if [ $? -eq 0 ]; then
            echo "server.jar successfully downloaded."
          else
            echo "Error: Failed to download server.jar. Exiting..."
            exit 1
          fi
      
          # Verify the file was downloaded
          if [ ! -f "server.jar" ]; then
            echo "Error: server.jar is missing after download. Exiting..."
            exit 1
          fi
      
          echo "server.jar is ready for use."
        shell: bash

      # Commit changes
      - name: Commit changes
        run: |
          git commit -m "RUpdate server.jar"

      # Push changes
      - name: Push changes
        run: git push
        
      - name: Start Minecraft Server
        if: success()
        run: |
          echo "Starting Minecraft server..."
          
          # Create a log file for debugging
          LOG_FILE="minecraft_server_startup.log"
          touch $LOG_FILE
      
          # Function to start the Minecraft server if it's not already running
          start_server() {
            echo "Starting Minecraft server..." | tee -a $LOG_FILE
            screen -dmS minecraft_server $JAVA_HOME/bin/java -Xmx12G -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=40 -XX:G1MaxNewSizePercent=50 -XX:G1HeapRegionSize=16M -XX:G1ReservePercent=15 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -Daikars.new.flags=true -Dusing.aikars.flags=https://mcutils.com -jar server.jar --nogui | tee -a $LOG_FILE
            # Wait for the server to start properly
            sleep 30
          }
      
          # Start the server initially
          start_server
      
          # Monitor the screen session and restart if it fails
          nohup bash -c 'while true; do
            # Check if the screen session is running
            if ! screen -list | grep -q "minecraft_server"; then
              echo "Minecraft server is not running. Restarting..." | tee -a $LOG_FILE
              start_server
            fi
      
            # Save server state periodically
            echo "Saving server..." | tee -a $LOG_FILE
            screen -S minecraft_server -p 0 -X stuff "save-all flush\n" | tee -a $LOG_FILE
            sleep 5  # Wait a moment for the server to save
            echo "Server saved!" | tee -a $LOG_FILE
      
            # Check for changes before committing
            if ! git diff --quiet; then
              # If there are changes, stage and commit them
              git add --all || echo "Git add failed, continuing..." | tee -a $LOG_FILE
              git commit -m "Auto-update server changes after save" || echo "Git commit failed, continuing..." | tee -a $LOG_FILE
      
              # Push changes
              for i in {1..3}; do
                git push -f && break || { echo "Push failed, retrying... ($i)" | tee -a $LOG_FILE; sleep 5; }
              done || echo "Push failed after multiple attempts, continuing..." | tee -a $LOG_FILE
            else
              echo "No changes to commit." | tee -a $LOG_FILE
            fi
      
            sleep 120  # Save every 2 minutes
          done' &
      
          # Wait for the server to run for a set duration (e.g., 5 hours)
          sleep 18000
          echo "Stopping Minecraft server..." | tee -a $LOG_FILE
      
          # Notify users before stopping
          for i in {60..1}; do
            screen -S minecraft_server -p 0 -X stuff "say Server will restart in $i seconds\n" | tee -a $LOG_FILE
            sleep 1
          done
      
          screen -S minecraft_server -p 0 -X stuff "say Server restarting...\n" | tee -a $LOG_FILE
      
          # Stop the server gracefully
          screen -S minecraft_server -p 0 -X stuff "stop\n" | tee -a $LOG_FILE
          sleep 30
      
          # Pull latest changes before final commit
          echo "Pulling latest changes..." | tee -a $LOG_FILE
          git fetch origin master && git reset --hard origin/master || { echo "Git fetch failed, skipping..." | tee -a $LOG_FILE; true; }
      
          # Final commit to capture all changes if there are any
          if ! git diff --quiet; then
            git add --all || echo "Git add failed on final commit, continuing..." | tee -a $LOG_FILE
            git commit -m "Final commit after server stop" || echo "Final commit failed, continuing..." | tee -a $LOG_FILE
            git push -f || echo "Final git push failed, continuing..." | tee -a $LOG_FILE
          else
            echo "No changes to commit after server stop." | tee -a $LOG_FILE
          fi
        shell: bash
